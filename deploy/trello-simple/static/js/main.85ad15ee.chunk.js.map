{"version":3,"sources":["components/images/cancel.svg","components/styles/header.module.css","components/images/trello.svg","components/header.jsx","components/board-manager.jsx","components/task.jsx","components/list.jsx","components/board.jsx","Main.jsx","reportWebVitals.js","index.js","components/styles/task.module.css","components/styles/board.module.css","components/styles/task_list.module.css","components/styles/board-manager.module.css"],"names":["module","exports","__webpack_require__","p","header__container","Header","props","react_default","a","createElement","className","css","header__content","dist","header__logo_container","to","src","header_logo","alt","height","BoardMng","boards","_useState","useState","JSON","parse","localStorage","getItem","_useState2","Object","slicedToArray","boards_list","set_boards_list","window","addEventListener","e","key","newValue","board_creatorbox","board_mng__editor","board_mng__item","board_mng__editor_header","board_mng__item_name","onSubmit","preventDefault","form_data","FormData","target","name","description","console","log","boards_tb_new","new_board_data","id","datetime","Date","toDateString","stringify","objectSpread","new_id","id_arr","board_id","push","Math","max","apply","1","setItem","add_board_db","get","placeholder","type","boards_arr","n_board_data","map","item","board_ref","concat","board_mng_item_info","board_desc","board_datetime","board_sep_line","board_mng_item_button_container","board_mng__container","board_mng__content","Task","tasks_tb","task_editor_state","set_task_edotor_state","_useState3","_useState4","set_task_info_full_state","_useState5","task_data","_useState6","set_task_data","task_full_info_ref","board_data","task_navigator","useNavigate","_useSearchParams","useSearchParams","_useSearchParams2","task_search_params","task_editor_handler","task_tb_upd","task_data_form_upd","task_obj_upd","list_id","task_text","deadline","on_change_tasks_tb","on_change_board_tasks_tb_state","task__container","task_info__container","task_info_name","task_info_desc","task_info_deadline","task__options_btns_container","onClick","task_editor__container","task_editor__content","task_editor__cancel_btn","cancel_btn","width","htmlFor","defaultValue","lists_arr","list","value","task_editor__option_btns","task_editor__save_btn","task_editor__delete_btn","task_info_full__container","task_info_full__content","task_info_full__cancel_btn","task_info__block","task_name","task_desc","task_info__sep_line","task_deadline","task_full_info__edit_btn","TaskList","list_data_props","list_data","list_board_id","list_name","list_desc","list_datetime","set_list_data","tasks_tb_state","set_tasks_state","list_editor_state","set_list_editor_state","_useState7","_useState8","task_creator_state","set_task_creator_state","list_tasks","tasks_obj","tasks_buff","task_i","task_filter","list_delete_handler","new_lists_db","lists_tb","on_lists_tb_change","new_task_handler","date","tasks_tb_new","new_task_data","task_id","add_task_db","list_editor_handler","edited_form_data","list_obj_upd","lists_db","update_list_db","tasks_arr","tasks","task","components_task","useEffect","board_tasks_tb_state","task_list__container","task_list__header","task_list__header_info_block","list_editor_btn_container","task_creator__btn_container","list_editor__container","list_editor__content","list_editor__cancel_btn","cols","rows","list_editor__save_btn","list_editor__delete_btn","task_creator__container","task_creator__content","task_creator__cancel_btn","task_creator__create_btn","Board","search_params","boards_tb","lists_tb_state","set_lists_state","set_board","task_lists","lists_obj","lists_buff","list_i","list_filter","board_editor_state","set_board_editor_state","navigate_root","delete_board_handler","updates_boards_tb","board_editor_handler","new_board_obj","new_data_from","board_new_data","lists","components_list","list_creator","board__lists_creatorbox","board__lists_item","list_description","lists_tb_new","new_list_data","add_list_db","board__container","board__content","board_header__container","board_header","board__info_block","board_data__name","board_data__desc","board_data__datetime","board__tools_block","board_editor_btn","board__lists_container","board_editor__container","board_editor__content","board__editor_cancel_btn","board__editor_save_btn","board__editor_delete_btn","Main","header","react_router_dist","path","element","board_manager","board","reportWebVitals","onPerfEntry","Function","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_Main"],"mappings":"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","file":"static/js/main.85ad15ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cancel.a635978b.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header__container\":\"header_header__container__2j_yU\"};","module.exports = __webpack_public_path__ + \"static/media/trello.31219b44.svg\";","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport css from './styles/header.module.css'\nimport header_logo from './images/trello.svg'\n\nfunction Header(props){\n    return(\n        <header className={css.header__container}>\n            <div className={css.header__content}>\n                <Link className={css.header__logo_container} to='/'>\n                    <img src={header_logo} alt=\"logo\" height=\"80px\"/>\n                </Link>\n            </div>\n        </header>\n    );\n}\n\nexport default Header;","import React, {useState, useEffect} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport css from \"./styles/board-manager.module.css\";\n\n\nfunction BoardMng(props){\n    const [boards_list, set_boards_list] = useState(JSON.parse(localStorage.getItem('boards_tb'))); //null - if empty\n    let boards = null;\n\n   \n    const add_board_db = (name, description)=>{\n        console.log('boards lists: ', boards_list);\n        const date = new Date().toDateString();\n        let boards_tb_new = null;\n        let new_board_data = {\n            id: null,\n            name: name,\n            description: description,\n            datetime: date,                 \n        };\n        if(JSON.stringify(boards_list) != '{}' && boards_list){\n            console.log('boards lists is true: ');\n            boards_tb_new = {...boards_list}; //new obj to update state and render again\n            let id_arr = [];\n            let new_id = null;\n            for (let board_id in boards_tb_new){\n                id_arr.push(board_id);\n            }\n            new_id = Math.max(...id_arr) + 1;\n            new_board_data.id = new_id;\n            boards_tb_new[new_id] = new_board_data;\n            localStorage['boards_tb'] =JSON.stringify(boards_tb_new);\n        }\n        else{\n            new_board_data.id = 1;\n            boards_tb_new = {1 : new_board_data};\n            localStorage.setItem('boards_tb', JSON.stringify(boards_tb_new));\n        }\n        set_boards_list(boards_tb_new);\n    }\n\n    const new_board_handler = (e)=>{\n        e.preventDefault();\n        const form_data = new FormData(e.target);\n        const new_board_name = form_data.get('board_name'); \n        const new_board_desc = form_data.get('board_desc');\n        add_board_db(new_board_name, new_board_desc);\n    }\n\n    //storage listener\n    window.addEventListener('storage', (e)=>{\n        if(e.key !== 'boards_tb') return;\n        set_boards_list(JSON.parse(e.newValue));\n        /*...*/\n    });    \n\n    const board_creatorbox = \n        <div className={css.board_mng__editor + ' ' + css.board_mng__item}>\n            <div className={css.board_mng__editor_header}>\n                <h3 className={css.board_mng__item_name}>Добавить доску</h3>\n            </div>\n            <form onSubmit={new_board_handler}>\n                <input name=\"board_name\" placeholder=\"Название доски...\" type=\"text\" />\n                <textarea name=\"board_desc\" placeholder=\"Описание доски...\" ></textarea>\n                <button type=\"submit\">\n                    <span>Добавить</span>\n                </button>\n            </form>\n        </div>\n    \n    let boards_arr = []\n    for (let n_board_data in boards_list){\n        boards_arr.push(boards_list[n_board_data]);\n    }\n\n    boards = boards_arr.map((item)=>{\n        let board_ref = `/board?board-id=${item.id}&board-name=${item.name}`;\n        return (\n        <div className={css.board_mng__item} key={item.id}>\n            <div className={css.board_mng_item_info}>\n                <h3 className={css.board_mng__item_name}>{item.name}</h3>\n                <p className={css.board_desc}>{item.description}</p>\n                <p className={css.board_datetime}>{item.datetime}</p>\n            </div>\n            <span className={css.board_sep_line}></span>\n            <Link className={css.board_mng_item_button_container} to={board_ref}>\n                <span>Перейти</span>\n            </Link>            \n        </div>\n        )\n    });\n\n    return(\n        <div className={css.board_mng__container}>\n            <div className={css.board_mng__content}>\n                {boards}\n                {board_creatorbox}\n            </div>\n        </div>\n    );\n}\n\nexport default BoardMng;","import React from \"react\";\nimport { useState } from \"react\";\nimport css from './styles/task.module.css'\nimport cancel_btn from './images/cancel.svg'\nimport { Link, NavLink, useNavigate, useSearchParams } from \"react-router-dom\";\n\n\nfunction Task(props){\n    \n    let tasks_tb = JSON.parse(localStorage.getItem('tasks_tb'));\n    const [task_editor_state, set_task_edotor_state] = useState(false);\n    const [task_info_full_state, set_task_info_full_state] = useState(false);\n    const [task_data, set_task_data] = useState(props.task_data);\n    const task_full_info_ref = `/board?board-id=${props.board_data.id}&board-name=${props.board_data.name}&task-id=${task_data.id}&task-name=${task_data.name}`;\n    const board_ref = `/board?board-id=${props.board_data.id}&board-name=${props.board_data.name}`;\n    const task_navigator = useNavigate();\n    let [task_search_params, set_task_search_params] = useSearchParams();\n\n    const update_tasks_db = (task_tb_upd) =>{\n        localStorage.setItem('tasks_tb', JSON.stringify(task_tb_upd));\n        props.on_change_tasks_tb(task_tb_upd);\n        props.on_change_board_tasks_tb_state(task_tb_upd);\n    }\n\n    const delete_task_db = () =>{\n        tasks_tb = JSON.parse(localStorage.getItem('tasks_tb'));\n        delete tasks_tb[task_data.id];\n        localStorage.setItem('tasks_tb', JSON.stringify(tasks_tb));\n        props.on_change_board_tasks_tb_state(tasks_tb);\n    }\n\n    const task_delete_handler = (e) =>{\n        e.preventDefault();\n        delete_task_db();\n        set_task_edotor_state(false);\n        props.on_change_tasks_tb(tasks_tb);\n    }\n\n    const task_editor_handler = (e)=>{\n        tasks_tb = JSON.parse(localStorage.getItem('tasks_tb'));\n        e.preventDefault();\n        const task_data_form_upd = new FormData(e.target);\n        const task_obj_upd = {\n            id: task_data.id,\n            list_id: task_data_form_upd.get('task_replacer'),\n            name: task_data_form_upd.get('task_name_new'),\n            description: task_data_form_upd.get('task_desc_new'),\n            task_text: task_data_form_upd.get('task_text_new'),\n            datetime: task_data.datetime,\n            deadline: task_data_form_upd.get('task_deadline_new'),\n        };\n        console.log('new list_id', task_data_form_upd.get('task_replacer'));\n        tasks_tb[task_obj_upd.id] = task_obj_upd;\n        set_task_data(task_obj_upd);\n        set_task_edotor_state(false);\n        update_tasks_db(tasks_tb);    \n    }\n\n    const task_info_full = () =>{\n        if(\n            task_search_params.get('task-id') != task_data.id \n            &&\n            task_search_params.get('task-name') != task_data.name\n        ) return null;\n        return(\n            <div className={css.task_info_full__container}>\n                <div className={css.task_info_full__content}>\n                    <button className={css.task_info_full__cancel_btn} onClick={(e) => {\n                        e.preventDefault();\n                        set_task_info_full_state(false);\n                        task_navigator(board_ref);\n                    }}>\n                        <img src={cancel_btn} alt=\"cancel\" width='50px' height='50px' />\n                    </button>\n                    <div className={css.task_info__block}>\n                        <h2 className={css.task_name}>{task_data.name}</h2>\n                        <p  className={css.task_desc}>{task_data.description}</p>\n                        <span className={css.task_info__sep_line}></span>\n                        <p  className={css.task_text}>{task_data.task_text}</p>\n                        <p  className={css.task_deadline}>{task_data.deadline}</p>\n                    </div>\n                    <button className={css.task_full_info__edit_btn} onClick={(e => {\n                        e.preventDefault();\n                        set_task_edotor_state(true);\n                    })}>\n                        <span>Редактировать</span>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n    \n    const tasks_lists_selects = ()=>{\n        let select_items = props.lists_arr.map((list)=>{\n            return (\n                <option key={list.id} name={list.name} id={list.id} value={list.id}>{list.name}</option>\n            );\n        });\n        return select_items;\n    }\n\n    const task_editor = () =>{\n        if(!task_editor_state) return null;\n        return(\n            <div className={css.task_editor__container}>\n                <div className={css.task_editor__content}>\n                    <button className={css.task_editor__cancel_btn} onClick={(e) => {\n                        e.preventDefault();\n                        set_task_edotor_state(false);\n                    }}>\n                        <img src={cancel_btn} alt=\"cancel\" width='50px' height='50px' />\n                    </button>\n                    <form onSubmit={task_editor_handler}>\n                        <label htmlFor=\"task_name_new\">Название задания:</label>\n                        <input name=\"task_name_new\" type=\"text\" placeholder=\"Название...\" defaultValue={task_data.name} />\n                        <label htmlFor=\"task_desc_new\">Краткое описание задания:</label>\n                        <textarea name=\"task_desc_new\" placeholder=\"Описание...\" defaultValue={task_data.description}></textarea>\n                        <label htmlFor=\"task_text_new\">Полное описание задания:</label>\n                        <textarea name=\"task_text_new\" placeholder=\"Полное описание...\" defaultValue={task_data.task_text}></textarea>\n                        <label htmlFor=\"task_deadline_new\">Срок выполнения задания:</label>\n                        <input name=\"task_deadline_new\" type=\"datetime-local\" defaultValue={task_data.deadline} />\n                        <label htmlFor=\"task_replacer\">Перевести задание в другой список:</label>\n                        <select name=\"task_replacer\" defaultValue={task_data.list_id}>\n                            {tasks_lists_selects()}\n                        </select>\n                        <div className={css.task_editor__option_btns}>\n                            <button className={css.task_editor__save_btn} type=\"submit\">\n                                <span>Сохранить</span>\n                            </button>\n                            <button className={css.task_editor__delete_btn} onClick={task_delete_handler}>\n                                <span>Удалить</span>\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>    \n        );\n    }\n\n    return(\n        <div className={css.task__container} key={task_data.id}>\n            <div className={css.task_info__container}>\n                <h3 className={css.task_info_name}>{task_data.name}</h3>\n                <p className={css.task_info_desc}>{task_data.description}</p>\n                <p className={css.task_info_deadline}><span>Сделать до: </span>{task_data.deadline}</p>\n            </div>\n            <div className={css.task__options_btns_container}>\n                <button onClick={(e => {\n                    e.preventDefault();\n                    set_task_edotor_state(true);\n                })}>\n                    <span>Редактировать</span>\n                </button>\n                <button onClick={(e) => {\n                        e.preventDefault();\n                        set_task_info_full_state(true);\n                        task_navigator(task_full_info_ref);\n                    }}>\n                    <span>Показать</span>\n                </button>\n                \n\n            </div>\n            {task_editor()}\n            {task_info_full()}\n        </div>\n    );\n}\n\nexport default Task;","import React, {useState, useEffect} from \"react\";\nimport { json } from \"react-router-dom\";\nimport css from './styles/task_list.module.css';\nimport Task from \"./task.jsx\";\nimport cancel_btn from './images/cancel.svg'\n\n\nfunction TaskList(props){\n    const list_data_props = props.list_data;\n    const [list_data, set_list_data] = useState(\n        {\n            list_id: list_data_props.id,\n            list_board_id: list_data_props.board_id,\n            list_name: list_data_props.name,\n            list_desc: list_data_props.description,\n            list_datetime: list_data_props.datetime\n        }\n    );\n    const [tasks_tb_state, set_tasks_state] = useState(JSON.parse(localStorage.getItem('tasks_tb'))); //all tasks\n    const [list_editor_state, set_list_editor_state] = useState(false);\n    const [task_creator_state, set_task_creator_state] = useState(false);\n    const list_tasks = task_filter(list_data.list_id, tasks_tb_state); // filtred tasks of this lists, only uses in rendering\n    \n    \n\n    function task_filter(list_id, tasks_obj){\n        if(!tasks_obj) return null;\n        let tasks_buff = {};\n        for(let task_i in tasks_obj){\n            if(tasks_obj[task_i].list_id == list_id)\n            {\n                tasks_buff[task_i] = tasks_obj[task_i];\n            }\n        }\n        return tasks_buff;\n    }\n    \n    const add_task_db = (name, description, task_text, deadline)=>{\n        const tasks_obj = JSON.parse(localStorage.getItem('tasks_tb'));\n        const date = new Date().toDateString();\n        let tasks_tb_new = null;\n        let new_task_data = {\n            id: null,\n            list_id: list_data.list_id,\n            name: name,\n            description: description,\n            task_text: task_text,\n            datetime: date,\n            deadline: deadline\n        }\n        if( JSON.stringify(tasks_obj) != '{}' && tasks_obj){\n            tasks_tb_new = {...tasks_obj};\n            let id_arr = []\n            let new_id = null;\n            for(let task_id in tasks_tb_new){\n                id_arr.push(task_id);\n            }\n            new_id = Math.max(...id_arr) + 1;\n            new_task_data.id = new_id;\n            console.log('new id', new_id, 'id arr', id_arr);\n            tasks_tb_new[new_id] = new_task_data;\n            localStorage['tasks_tb'] = JSON.stringify(tasks_tb_new)\n        }\n        else{\n            new_task_data.id = 1;\n            tasks_tb_new = {1: new_task_data};\n            localStorage.setItem('tasks_tb', JSON.stringify(tasks_tb_new));\n        }\n        set_tasks_state(tasks_tb_new);\n        props.on_change_board_tasks_tb_state(tasks_tb_new);\n    }\n\n    const update_list_db = (list_obj_upd) => {\n        let lists_db = JSON.parse(localStorage.getItem('lists_tb'));\n        lists_db[list_obj_upd.id] = list_obj_upd;\n        console.log('updated ;isu: ' , lists_db);\n        localStorage.setItem('lists_tb', JSON.stringify(lists_db));\n    }\n\n    const delete_list_db = (new_lists_db) =>{\n        localStorage.setItem('lists_tb', JSON.stringify(new_lists_db));        \n    }\n\n    const list_delete_handler = (e) => {\n        e.preventDefault();\n        let lists_tb = JSON.parse(localStorage.getItem('lists_tb'));\n        delete lists_tb[list_data.list_id];\n        delete_list_db(lists_tb);\n        props.on_lists_tb_change(lists_tb);\n        set_list_editor_state(false);\n    }\n\n    const new_task_handler = (e) =>{\n        e.preventDefault();\n        const form_data = new FormData(e.target);\n        const task_name = form_data.get('task_name');\n        const task_desription = form_data.get('task_desc');\n        const task_text = form_data.get('task_text');\n        const task_deadline = form_data.get('task_deadline');\n        add_task_db(task_name, task_desription, task_text, task_deadline);\n        set_task_creator_state(false);\n    }\n\n    const list_editor_handler = (e) =>{\n        e.preventDefault();\n        const edited_form_data = new FormData(e.target);\n        const list_obj_upd = {\n            id: list_data.list_id,\n            board_id: list_data.list_board_id,\n            name: edited_form_data.get('list_name_upd'),\n            description: edited_form_data.get('list_desc_upd'),\n            datetime: list_data.list_datetime\n        }\n        console.log(edited_form_data);\n        console.log('new data list', list_obj_upd);\n        update_list_db(list_obj_upd);\n        set_list_data({\n            list_id: list_obj_upd.id,\n            list_board_id: list_obj_upd.board_id,\n            list_name: list_obj_upd.name,\n            list_desc: list_obj_upd.description,\n            list_datetime: list_obj_upd.datetime \n        });\n        set_list_editor_state(false);\n    }\n\n    window.addEventListener('storage', (e)=>{\n        if(e.key != 'tasks_tb') return;\n        set_tasks_state(JSON.parse(e.newValue));\n        props.on_change_board_tasks_tb_state(JSON.parse(e.newValue));\n    });\n\n    const list_editor = () =>{\n        if(!list_editor_state) return null;\n        return (\n            <div className={css.list_editor__container}>\n                <div className={css.list_editor__content}>\n                    <button className={css.list_editor__cancel_btn} onClick={(e) => {\n                        e.preventDefault();\n                        set_list_editor_state(false);\n                    }}>\n                        <img src={cancel_btn} alt=\"cancel\" width='50px' height='50px'/>\n                    </button>\n                    <form onSubmit={list_editor_handler}>\n                        <label htmlFor=\"list_name_upd\">Название списка:</label>\n                        <input name=\"list_name_upd\" type=\"text\" placeholder=\"new list name\" defaultValue={list_data.list_name} />\n                        <label htmlFor=\"list_desc_upd\">Описание списка:</label>\n                        <textarea name=\"list_desc_upd\" cols=\"30\" rows=\"10\" placeholder=\"new list description\" defaultValue={list_data.list_desc}></textarea>\n                        <button className={css.list_editor__save_btn}  type=\"submit\">\n                            <span>Сохранить</span>\n                        </button>\n                        <button className={css.list_editor__delete_btn} onClick={list_delete_handler}>\n                            <span>Удалить</span>\n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n\n    const task_creator = () => {\n        if(!task_creator_state) return null;\n        return(\n            <div className={css.task_creator__container}>\n                <div className={css.task_creator__content}>\n                    <button className={css.task_creator__cancel_btn} onClick={(e) => {\n                        set_task_creator_state(false);\n                    }}>\n                         <img src={cancel_btn} alt=\"cancel\" width='50px' height='50px'/>\n                    </button>\n                    <form onSubmit={new_task_handler}>\n                        <input name=\"task_name\" type=\"text\" placeholder=\"Название задания...\" />\n                        <textarea name=\"task_desc\" placeholder=\"Краткое описание задания...\"></textarea>\n                        <textarea name=\"task_text\" placeholder=\"Текст задания...\"></textarea>\n                        <label htmlFor=\"task_deadline\">Срок выполнения:</label>\n                        <input name=\"task_deadline\" type=\"datetime-local\"/>\n                        <button className={css.task_creator__create_btn} type=\"submit\">\n                            <span>Добавить</span>\n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n\n    let tasks_arr = []\n    for(let task_id in list_tasks) tasks_arr.push(list_tasks[task_id]);\n    let tasks =tasks_arr.map((task)=>{\n        return(\n            <Task key={task.id} board_data={props.board_data} lists_arr={props.lists_arr} task_data={task} on_change_tasks_tb={set_tasks_state} on_change_board_tasks_tb_state={props.on_change_board_tasks_tb_state}/>\n        );\n    });\n\n    useEffect(()=>{\n        if(JSON.stringify(props.board_tasks_tb_state) != JSON.stringify(tasks_tb_state)){\n            console.log(props.board_tasks_tb_state, '@@@' ,tasks_tb_state);\n            set_tasks_state(JSON.parse(localStorage.getItem('tasks_tb')));\n        }\n    });\n\n    return(\n        <div className={css.task_list__container}>\n            <div className={css.task_list__header}>\n                <div className={css.task_list__header_info_block}>\n                    <h2>{list_data.list_name}</h2>\n                    <p>{list_data.list_desc}</p>\n                </div>\n                <div className={css.list_editor_btn_container}>\n                    <button onClick={(e)=>{\n                        e.preventDefault();\n                        set_list_editor_state(true);\n                    }}>\n                        <span>Редактировать</span>\n                    </button>\n                </div>\n            </div>\n            <div className={css.task_creator__btn_container}>\n                <button onClick={(e)=>{\n                    e.preventDefault();\n                    set_task_creator_state(true);\n                }}>\n                    <span>Добавить задание</span>\n                </button>\n            </div>\n            {tasks}\n            {list_editor()} \n            {task_creator()}\n        </div>\n    );\n}\n\nexport default TaskList;","import React, { useState, useEffect } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport css from './styles/board.module.css'\nimport TaskList from \"./list.jsx\";\nimport cancel_btn from './images/cancel.svg'\n\nfunction Board(props){\n    let [search_params, set_search_params] = useSearchParams();\n    const boards_tb = JSON.parse(localStorage.getItem('boards_tb'));\n    const [lists_tb_state, set_lists_state] = useState(JSON.parse(localStorage.getItem('lists_tb')));\n    const [tasks_tb_state, set_tasks_state] = useState(JSON.parse(localStorage.getItem('tasks_tb')));\n\n    const board_id = search_params.get('board-id');\n    const [board_data, set_board] = useState(boards_tb[board_id]);\n    const task_lists = list_filter(board_id, lists_tb_state);\n    const [board_editor_state, set_board_editor_state] = useState(false);\n    const navigate_root = useNavigate();\n\n    function list_filter(board_id, lists_obj){\n        if(!lists_obj) return null;\n        let lists_buff = {};\n        for(let list_i in lists_obj){\n            if(lists_obj[list_i].board_id === board_id){\n                lists_buff[list_i] = lists_obj[list_i];\n            }\n        }\n        return lists_buff;\n    }\n\n    //let task_lists = null;\n    const add_list_db = (list_name, list_description)=>{\n        const lists_obj = JSON.parse(localStorage.getItem('lists_tb'));\n        const date = new Date().toDateString();\n        let lists_tb_new = null;\n        let new_list_data = {\n            id: null,\n            board_id: board_id,\n            name: list_name,\n            description: list_description,\n            datetime: date\n        }\n\n        if(JSON.stringify(lists_obj) != '{}' && lists_obj){\n            lists_tb_new = {...lists_obj};\n            console.log(lists_tb_new);\n            let id_arr = [];\n            let new_id;\n            for (let list_id in lists_tb_new){\n                id_arr.push(list_id);\n            }\n            new_id = Math.max(...id_arr) + 1;\n            new_list_data.id = new_id;\n            lists_tb_new[new_id] = new_list_data;\n            localStorage['lists_tb'] = JSON.stringify(lists_tb_new);\n        }\n        else{\n            new_list_data.id = 1;\n            lists_tb_new = {1: new_list_data};\n            localStorage.setItem('lists_tb', JSON.stringify(lists_tb_new));    \n        }\n        set_lists_state(lists_tb_new);\n    }\n\n    const update_board_db = (old_board_tb, new_board_obj) => {\n        boards_tb[new_board_obj.id] = new_board_obj;\n        localStorage.setItem('boards_tb', JSON.stringify(boards_tb));\n    }\n\n    const delete_board_db = (updates_boards_tb) => {\n        localStorage.setItem('boards_tb', JSON.stringify(updates_boards_tb));\n    }\n    \n    const delete_board_handler = () => {\n        delete boards_tb[board_id];\n        delete_board_db(boards_tb);\n        navigate_root('/');\n    }\n\n    const new_list_handler = (e) =>{\n        e.preventDefault();\n        const form_data = new FormData(e.target);\n        const list_name = form_data.get(\"list_name\");\n        const list_description = form_data.get(\"list_desc\");\n        add_list_db(list_name, list_description);\n    }\n\n    const board_editor_handler = (e)=>{\n        e.preventDefault();\n        console.log('board editor handler');\n        const new_data_from = new FormData(e.target);\n        const board_new_data = {\n            id: board_id,\n            name: new_data_from.get('new_board_name'),\n            description: new_data_from.get('new_board_desc'),\n            datetime: board_data.datetime\n        }\n        update_board_db(boards_tb, board_new_data);\n        set_board(board_new_data);\n        set_board_editor_state(false);\n    }\n\n    window.addEventListener('storage', (e)=>{\n        if(e.key != 'lists_tb') return;\n        set_lists_state(JSON.parse(e.newValue));\n    });\n\n    const board_editor = () => {\n        if(!board_editor_state) return null;\n        return (\n            <div className={css.board_editor__container}>\n                <div className={css.board_editor__content}>\n                    <button className={css.board__editor_cancel_btn} onClick={() => {\n                        set_board_editor_state(false);\n                    }}>\n                        <img src={cancel_btn} alt=\"cancel\" width='50px' height='50px'/>\n                    </button>\n                    <form onSubmit={board_editor_handler}>\n                        <label htmlFor=\"new_board_name\">Название доски:</label>\n                        <input name=\"new_board_name\" placeholder=\"Edit name of the board...\" type=\"text\" defaultValue={board_data.name} />\n                        <label htmlFor=\"new_board_desc\">Описание доски:</label>\n                        <textarea name=\"new_board_desc\" cols=\"30\" rows=\"10\" placeholder=\"Edit the description...\" defaultValue={board_data.description}></textarea>\n                        <button className={css.board__editor_save_btn} type=\"submit\">\n                            <span>Сохранить</span>\n                        </button>\n                        <button className={css.board__editor_delete_btn} onClick={delete_board_handler}>\n                            <span>Удалить</span>\n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n\n    const lists_arr = [];\n    for(let list_i in task_lists) lists_arr.push(task_lists[list_i]);\n    const lists = lists_arr.map((list)=>{\n        return (\n            <TaskList key={list.id} board_tasks_tb_state={tasks_tb_state} lists_arr={lists_arr} board_data={board_data} list_data={list} on_lists_tb_change={set_lists_state} on_change_board_tasks_tb_state={set_tasks_state}/>\n        );\n        \n    });\n\n    const list_creator = \n        <div className={css.board__lists_creatorbox + ' ' + css.board__lists_item}>\n            <h2>Добавить список</h2>\n            <form onSubmit={new_list_handler}>\n                <input name=\"list_name\" type=\"text\" placeholder=\"Название списка...\"/>\n                <textarea name=\"list_desc\" placeholder=\"Описание списка...\"></textarea>\n                <button type=\"submit\">\n                    <span>Добавить</span>\n                </button>\n            </form>\n        </div>\n\n    return(\n        <div className={css.board__container}>\n            <div className={css.board__content}>\n                <div className={css.board_header__container}>\n                    <div className={css.board_header}>\n                        <div className={css.board__info_block}>\n                            <h1 className={css.board_data__name}>{board_data.name}</h1>\n                            <p className={css.board_data__desc}>{board_data.description}</p>\n                            <p className={css.board_data__datetime}>{board_data.datetime}</p>\n                        </div>\n                        <div className={css.board__tools_block}>\n                            <button className={css.board_editor_btn} onClick={(e) => {\n                                e.preventDefault();\n                                set_board_editor_state(true);\n                            }}>\n                                <span>Редактировать</span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div className={css.board__lists_container}>\n                    {lists}\n                    {list_creator}\n                </div>\n                {board_editor()}\n\n            </div>\n        </div>\n    );\n}\n\nexport default Board;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Routes,\n    Route,\n    Link\n  } from \"react-router-dom\";\nimport Header from './components/header.jsx';\nimport BoardMng from './components/board-manager.jsx';\nimport Board from './components/board.jsx';\n\nfunction Main(props){\n    ///*\n    return (\n        <Router>\n            <Header/>\n            <Routes>\n                <Route path='/' element={<BoardMng/>}/>\n                <Route path='/board' element={<Board/>}/>\n            </Routes>\n        </Router>\n    );\n    //*/\n\n}\n\nexport default Main;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport Main from './Main.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task__container\":\"task_task__container__1k_AM\",\"task_info__container\":\"task_task_info__container__tiEKA\",\"task_info_name\":\"task_task_info_name__mKgCg\",\"task_info_desc\":\"task_task_info_desc__vOgly\",\"task_info_deadline\":\"task_task_info_deadline__1hP_q\",\"task__options_btns_container\":\"task_task__options_btns_container__2flDe\",\"task_info_full__container\":\"task_task_info_full__container__33Me0\",\"task_info_full__content\":\"task_task_info_full__content__1dDMv\",\"task_info_full__cancel_btn\":\"task_task_info_full__cancel_btn__da-C2\",\"task_info__block\":\"task_task_info__block__bV7ZR\",\"task_name\":\"task_task_name__26AsL\",\"task_desc\":\"task_task_desc__2Ga6w\",\"task_text\":\"task_task_text__1zYhP\",\"task_deadline\":\"task_task_deadline__bCFi_\",\"task_info__sep_line\":\"task_task_info__sep_line__MIZ-k\",\"task_full_info__edit_btn\":\"task_task_full_info__edit_btn__1uwaW\",\"task_editor__container\":\"task_task_editor__container__17FKa\",\"task_editor__content\":\"task_task_editor__content__1Nawe\",\"task_editor__cancel_btn\":\"task_task_editor__cancel_btn__3mfrK\",\"task_editor__option_btns\":\"task_task_editor__option_btns__2RQsR\",\"task_editor__save_btn\":\"task_task_editor__save_btn__P8aSt\",\"task_editor__delete_btn\":\"task_task_editor__delete_btn__2PpdF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board__container\":\"board_board__container__2D4nf\",\"board__content\":\"board_board__content__19JK3\",\"board_header__container\":\"board_board_header__container__H93IP\",\"board_header\":\"board_board_header__1d9Ld\",\"board__info_block\":\"board_board__info_block__3IfD9\",\"board_data__name\":\"board_board_data__name__Dbr_Y\",\"board_data__desc\":\"board_board_data__desc__1ayGT\",\"board_data__datetime\":\"board_board_data__datetime__1srCZ\",\"board__tools_block\":\"board_board__tools_block__3EXtK\",\"board_editor_btn\":\"board_board_editor_btn__gaAam\",\"board__lists_container\":\"board_board__lists_container__1T17O\",\"board__lists_creatorbox\":\"board_board__lists_creatorbox__h5eq8\",\"board_editor__container\":\"board_board_editor__container__309Kk\",\"board_editor__content\":\"board_board_editor__content__2McEG\",\"board__editor_cancel_btn\":\"board_board__editor_cancel_btn__tm631\",\"board__editor_save_btn\":\"board_board__editor_save_btn__C1nxw\",\"board__editor_delete_btn\":\"board_board__editor_delete_btn__1hfn-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task_list__container\":\"task_list_task_list__container__1stqe\",\"task_list__header\":\"task_list_task_list__header__1Bfsb\",\"task_list__header_info_block\":\"task_list_task_list__header_info_block__jXe09\",\"list_editor_btn_container\":\"task_list_list_editor_btn_container__3O-6w\",\"list_editor__container\":\"task_list_list_editor__container__3CgVv\",\"list_editor__content\":\"task_list_list_editor__content__2nNy7\",\"list_editor__cancel_btn\":\"task_list_list_editor__cancel_btn__SQZdZ\",\"list_editor__save_btn\":\"task_list_list_editor__save_btn__PeCnT\",\"list_editor__delete_btn\":\"task_list_list_editor__delete_btn__1UlO8\",\"task_creator__btn_container\":\"task_list_task_creator__btn_container__1aRVG\",\"task_creator__container\":\"task_list_task_creator__container__2HbVX\",\"task_creator__content\":\"task_list_task_creator__content__Rppas\",\"task_creator__cancel_btn\":\"task_list_task_creator__cancel_btn__d8bZK\",\"task_creator__create_btn\":\"task_list_task_creator__create_btn__2EcT4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board_mng__container\":\"board-manager_board_mng__container__1JkDB\",\"board_mng__content\":\"board-manager_board_mng__content__uDrSI\",\"board_mng__item\":\"board-manager_board_mng__item__1lJIr\",\"board_mng_item_info\":\"board-manager_board_mng_item_info__jsYAQ\",\"board_mng__item_name\":\"board-manager_board_mng__item_name__3AKRA\",\"board_desc\":\"board-manager_board_desc__3J7XS\",\"board_datetime\":\"board-manager_board_datetime__eAmGj\",\"board_sep_line\":\"board-manager_board_sep_line__2b6Dc\",\"board_mng_item_button_container\":\"board-manager_board_mng_item_button_container__1x1cT\",\"board_mng__editor\":\"board-manager_board_mng__editor__1_Z4e\"};"],"sourceRoot":""}